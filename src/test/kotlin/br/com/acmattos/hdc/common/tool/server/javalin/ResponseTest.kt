package br.com.acmattos.hdc.common.tool.server.javalin

import org.assertj.core.api.Assertions.assertThat
import org.spekframework.spek2.Spek
import org.spekframework.spek2.style.gherkin.Feature

const val ULID_ID = "01EAWYQD4T72NVTW5DAWSXESPB"
const val DATA = "200"
const val INVALID_DATA = "400"
const val MIN_ULID_ID = "00000000000000000000000000"
const val MAX_ULID_ID = "7ZZZZZZZZZZZZZZZZZZZZZZZZZ"

/**
 * @author ACMattos
 * @since 21/09/2021.
 */
object ResponseTest : Spek({
    Feature("${Response::class.java} usage") {
        Scenario("successful response - given uid") {
            lateinit var response: Response
            lateinit var uid: String
            var status = 0
            lateinit var data: Any
            Given("""a valid uid: $ULID_ID""") {
                uid = ULID_ID
            }
            And("""a successful status: $DATA""") {
                status = DATA.toInt()
            }
            And("""some data: $DATA""") {
                data = DATA
            }
            When("""#create is executed""") {
                response = Response.create(status, data, uid)
            }
            Then("""a response.uid equal to ULID_ID""") {
                assertThat(response.uid).isEqualTo(ULID_ID)
            }
            And("""a response.status equal to DATA.toInt()""") {
                assertThat(response.status).isEqualTo(DATA.toInt())
            }
            And("""a response.uid equal to DATA""") {
                assertThat(response.data).isEqualTo(DATA)
            }
        }

        Scenario("successful response - autogenerated uid") {
            lateinit var response: Response
            var status = 0
            lateinit var data: Any
            Given("""a successful status: $DATA""") {
                status = DATA.toInt()
            }
            And("""some data: $DATA""") {
                data = DATA
            }
            When("""#create is executed""") {
                response = Response.create(status, data)
            }
            Then("""a response.uid is strictly between MIN_ULID_ID - MAX_ULID_ID """) {
                assertThat(response.uid).isStrictlyBetween(MIN_ULID_ID, MAX_ULID_ID)
            }
            And("""a response.status equal to DATA.toInt()""") {
                assertThat(response.status).isEqualTo(DATA.toInt())
            }
            And("""a response.uid equal to DATA""") {
                assertThat(response.data).isEqualTo(DATA)
            }
        }

        Scenario("unsuccessful response - given uid") {
            lateinit var response: Response
            lateinit var uid: String
            var status = 0
            lateinit var exception: Throwable
            Given("""a valid uid: $ULID_ID""") {
                uid = ULID_ID
            }
            And("""an unsuccessful status: $INVALID_DATA""") {
                status = INVALID_DATA.toInt()
            }
            And("""an exception: ${IllegalArgumentException::class.java}""") {
                exception = IllegalArgumentException("")
            }
            When("""#create is executed""") {
                response = Response.create(MessageTrackerCode("01FK6PF0DWKTN1BYZW6BRHFZFJ"), status, null, exception, uid)//TODO VERIFY
            }
            Then("""a response.uid equal to ULID_ID""") {
                assertThat(response.uid).isEqualTo(ULID_ID)
            }
            And("""a response.status equal to INVALID_DATA.toInt()""") {
                assertThat(response.status).isEqualTo(INVALID_DATA.toInt())
            }
            And("""a response.data equal to exception.message""") {
                assertThat(response.data).isEqualTo(exception.message)
            }
        }

        Scenario("unsuccessful response - null exception message, autogenerated uid") {
            lateinit var response: Response
            lateinit var uid: String
            var status = 0
            lateinit var exception: Throwable
            Given("""a valid uid: $ULID_ID""") {
                uid = ULID_ID
            }
            And("""an unsuccessful status: $INVALID_DATA""") {
                status = INVALID_DATA.toInt()
            }
            And("""an exception: ${Exception::class.java}""") {
                exception = Exception()
            }
            When("""#create is executed""") {
                response = Response.create(MessageTrackerCode("01FK6PF0DWKTN1BYZW6BRHFZFJ"), status, null, exception, uid)//TODO VERIFY
            }
            Then("""a response.uid is strictly between MIN_ULID_ID - MAX_ULID_ID """) {
                assertThat(response.uid).isStrictlyBetween(MIN_ULID_ID, MAX_ULID_ID)
            }
            And("""a response.status equal to INVALID_DATA.toInt()""") {
                assertThat(response.status).isEqualTo(INVALID_DATA.toInt())
            }
            And("""a response.data equal to $UNKNOWN_REASON""") {
                assertThat(response.data).isEqualTo(UNKNOWN_REASON)
            }
        }

        Scenario("unsuccessful response - given message") {
            lateinit var response: Response
            lateinit var uid: String
            var status = 0
            lateinit var message: Any
            Given("""a valid uid: $ULID_ID""") {
                uid = ULID_ID
            }
            And("""an unsuccessful status: $INVALID_DATA""") {
                status = INVALID_DATA.toInt()
            }
            And("""a exception: ${IllegalArgumentException::class.java}""") {
                message = INVALID_DATA
            }
            When("""#create is executed""") {
                response = Response.create(MessageTrackerCode("01FK6PF0DWKTN1BYZW6BRHFZFJ"),status, message, null, uid)//TODO VERIFY
            }
            Then("""a response.uid equal to ULID_ID""") {
                assertThat(response.uid).isEqualTo(ULID_ID)
            }
            And("""a response.status equal to INVALID_DATA.toInt()""") {
                assertThat(response.status).isEqualTo(INVALID_DATA.toInt())
            }
            And("""a response.uid equal to INVALID_DATA""") {
                assertThat(response.data).isEqualTo(INVALID_DATA)
            }
        }
    }
})
